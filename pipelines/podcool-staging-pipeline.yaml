kind: "BuildConfig"
apiVersion: "v1"
metadata:
  name: "poodcool-staging-pipeline"
spec:
  strategy:
    jenkinsPipelineStrategy:
      jenkinsfile: |-
        // path of the template to use
        def templatePath = 'https://raw.githubusercontent.com/williamcaban/podcool-docs/master/templates/podcool-template.json'
        // name of the template that will be created
        def templateName = 'podcool-example'
        // NOTE, the "pipeline" directive/closure from the declarative pipeline syntax needs to include, or be nested outside,
        // and "openshift" directive/closure from the OpenShift Client Plugin for Jenkins.  Otherwise, the declarative pipeline engine
        // will not be fully engaged.
        pipeline {
            agent any
            options {
                // set a timeout of 5 minutes for this pipeline
                timeout(time: 5, unit: 'MINUTES')
            }

            stages {

                stage('preamble') {
                    steps {
                        echo 'Running preamble stage'
                        script {
                            openshift.withCluster() {
                                openshift.withProject() {
                                    echo "Using project: ${openshift.project()}"
                                }
                            }
                        }
                    }
                }

                stage('cleanup') {
                    steps {
                        echo 'Cleaning previous deployment'
                        script {
                            openshift.withCluster() {
                                openshift.withProject() {
                                    // delete everything with this template label
                                    // openshift.selector("all", [ template : templateName ]).delete()
                                    openshift.selector("pods", [ template : templateName ]).delete()
                                    openshift.selector("dc", [ template : templateName ]).delete()
                                    openshift.selector("svc", [ template : templateName ]).delete()
                                    openshift.selector("bc", [ template : templateName ]).delete()
                                    openshift.selector("is", [ template : templateName ]).delete()
                                    // delete any secrets with this template label
                                    if (openshift.selector("secrets", templateName).exists()) {
                                        openshift.selector("secrets", templateName).delete()
                                    }
                                }
                            }
                        } // script
                    } // steps
                } // stage

                stage('create') {
                    steps {
                        echo 'Create new application from template'
                        script {
                            openshift.withCluster() {
                                openshift.withProject() {
                                    // create a new application from the templatePath
                                    openshift.newApp(templatePath)
                                }
                            }
                        } // script
                    } // steps
                } // stage

                stage('build') {
                    steps {
                        echo 'Monitoring build from app created from template'
                        script {
                            openshift.withCluster() {
                                openshift.withProject() {
                                    def builds = openshift.selector("bc", templateName).related('builds')
                                    builds.untilEach(1) {
                                        return (it.object().status.phase == "Complete")
                                    }
                                }
                            }
                        } // script
                    } // steps
                } // stage

                stage('deploy') {
                    steps {
                        echo 'Deploy to project and validate Pods are Running'
                        script {
                            openshift.withCluster() {
                                openshift.withProject() {
                                    def rm = openshift.selector("dc", templateName).rollout()
                                    openshift.selector("dc", templateName).related('pods').untilEach(1) {
                                        return (it.object().status.phase == "Running")
                                    }
                                }
                            }
                        } // script
                    } // steps
                } // stage

                stage('tag') {
                    steps {
                        echo 'Waiting for human input'
                        timeout(time:5, unit:'MINUTES') {
                            input message: "Promote to STAGE?", ok: "Promote"
                        }
                        script {
                            openshift.withCluster() {
                                openshift.withProject() {
                                    // if everything else succeeded, tag the ${templateName}:latest image as ${templateName}-staging:latest
                                    // a pipeline build config for the staging environment can watch for the ${templateName}-staging:latest
                                    // image to change and then deploy it to the staging environment
                                    openshift.tag("${templateName}:latest", "${templateName}-staging:latest")
                                }
                            }
                        } // script
                    } // steps
                } // stage

            } // stages

        } // pipeline
      type: JenkinsPipeline

